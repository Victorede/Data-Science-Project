name: Delete Merged and Closed Branches

on:
  schedule:
    - cron: "0 0 * * 0" # Runs every Sunday at midnight
  workflow_dispatch: # Allows manual trigger

jobs:
  delete-branches:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Defined once here

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Set up GitHub CLI authentication
        run: gh auth setup-git

      - name: Fetch merged pull requests
        run: |
          gh pr list --state merged --json headRefName --jq '.[].headRefName' > merged_branches.txt

      - name: Delete merged branches
        run: |
          error_messages=""
          while read branch; do
            if [ "$branch" != "main" ]; then
              output=$(git push origin --delete "$branch" 2>&1)
              if echo "$output" | grep -q "remote ref does not exist"; then
                echo "Branch $branch does not exist, skipping"
              elif echo "$output" | grep -q "failed to push some refs"; then
                error_messages="$error_messages\n$output"
              else
                echo "$output" # Show successful branch deletion message
              fi
            fi
          done < merged_branches.txt
          if [ -n "$error_messages" ]; then
            echo -e "Error(s) encountered during branch deletion:\n$error_messages"
          fi

      - name: Fetch closed (stale) pull requests
        run: |
          gh pr list --state closed --json headRefName --jq '.[].headRefName' > closed_branches.txt

      - name: Delete closed branches
        run: |
          error_messages=""
          while read branch; do
            if [ "$branch" != "main" ]; then
              output=$(git push origin --delete "$branch" 2>&1)
              if echo "$output" | grep -q "remote ref does not exist"; then
                echo "Branch $branch does not exist, skipping"
              elif echo "$output" | grep -q "failed to push some refs"; then
                error_messages="$error_messages\n$output"
              else
                echo "$output" # Show successful branch deletion message
              fi
            fi
          done < closed_branches.txt
          if [ -n "$error_messages" ]; then
            echo -e "Error(s) encountered during branch deletion:\n$error_messages"
          fi
